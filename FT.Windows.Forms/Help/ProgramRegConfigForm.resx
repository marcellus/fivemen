<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEACABoBQAAJgAAABAQAAABACAAaAQAAI4FAAAoAAAAEAAAACAAAAABAAgAAAAAAAAB
        AAAAAAAAAAAAAAABAAAAAQAAAAAAACgomQA1NZ8AAQGuAAAAsQAGB7MAAAC1AAoKswAKCrYAAwO5AAIC
        vQAFBbwAERG3ABoaugAcHLwAICC9ACYmvwA0NLcAQ0OcAFxcoQBdXagAQ0OxAE5OtABMTLwAYmKgAGtr
        pwB3d6IAcnKqAHJyrABpab0AAADCAAQEwQAJCcQADg7EAAAAygAICMwAFRXCAB8fxQASEsgAAwPTAAEB
        1QAHB9gAAADdAAgI2AAoKMIAJCfJACctzQAyMskAJibdACou2AAtLtsAKirdAC8w3gA7O9kAAADiAAAA
        6QAMDOwAHR3iACAg4AAvL+MAKyvlADIy4wA4OOMAOjrpAExM1QBoaMwAf3/CAHt7xQBoaNYAYGDbAGRk
        2gBHR+MASEjjAEtL5wBjY+IAZ2fiAHR05QB9fecAaWn2AIWF3QCAgOIAk5TkAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABsTGAAAAAAAAAAAAABCISo3Nzc2JwIAAAAAAAAWBCorKyorKyonJAAAAAAJAwMkJiQmJCYkISIbAAA+
        HgQIDg4ODg4ODggEFAAAOSseCCwOLCwsLCwMBAEAADgdLwctNDs/NDMOCB4OAEEwAE8tOjw8PDw8Oh4V
        QBoAAAAAMTNISEhHRzsjGUISAAAAAFFKSkxNTEo1R05JFwAAAAAAAFBFEURFAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wAA//8AAP4/AADwBwAA4AMAAMAB
        AACAAQAAgAEAAIABAAAgAAAA8AAAAPAAAAD8HwAA//8AAP//AAD//wAAKAAAABAAAAAgAAAAAQAgAAAA
        AABABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEsTAABaWwAA
        Zo0AAG2jAABmnQAAUXwAAC8/AAAmCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagQAAIaAAADB8QAA
        3f8AAOn/AADq/wAA6f8AAOL/AADT/AAAh8oAADA+AAAAAAAAAAAAAAAAAAAAAAAAYDQAAJSxAACw/wcH
        2P8HB9j/BwfY/wcH2P8HB9j/BwfY/wcH2P8BAdX/AAC96gAAMC8AAAAAAAAAAAAAvVYAALn8AACv/wMD
        rf8SEsj/EhLI/xISyP8SEsj/EhLI/xISyP8SEsj/CQnE/wAAyv8AAGmNAAAAAAAAAAAAANzHAADC/wAA
        tv8KCrf/HBy9/xwcvf8cHL3/HBy9/xwcvf8cHL3/HBy9/xERt/8AALL/AAB3ogAAAAAAAAAAAADf4gAA
        1/cEBMH/Cwu1/yYmv/8fH7z/KCjD/ygowf8pKcL/ICC9/ycnv/8SErf/AAC1/wAAh9cAACkJAACvFgIC
        7PQICJKaMTHJ/QYHs/8kJ8n/LzDe/y8v4/86Oun/MjLj/y0u2/8fH8X/Cgqz/wICvf8XF7n7AAAsOwAA
        qpcgIN35FRWJLFZW0LcnLc3/ICDg/ysr5f8rK+X/Kyvl/ysr5f8rK+X/ICDg/wUFvP8CApe9QEDS7gEB
        UYgBAbAEBQWvGwAAAAAjJcMsJCjX9ycn3f9JSeP/SUnj/0hI4/9HR+P/R0fj/yoq3f8ICMz/CAhtmERE
        rrQSEoPKAAAAAAAAAAAAAAAAAAAAAC4wzINjY+L/Z2fi/3V15f99fef/dHTl/2dn4v87O9n/QUHi9mlp
        9v9JSef8CQmjuQAAAAAAAAAAAAAAAAAAAAA6OtIBXFzYeHZ24OxgYNv/NDS3/2ho1v9VVdfoKyvBbzIy
        zwxKSu9RQEDobB4evw4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMTNAEOjrVN1ZW4XU1NccvOzvKAwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wAA//8AAPgHAADgAwAAwAEAAIABAACAAQAAgAAAAAAA
        AAAAAAAAIAAAAPAAAADwAAAA/B8AAP//AAD//wAA
</value>
  </data>
</root>