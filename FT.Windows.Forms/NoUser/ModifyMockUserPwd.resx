<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>